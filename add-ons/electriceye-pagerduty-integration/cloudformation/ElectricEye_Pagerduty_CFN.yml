AWSTemplateFormatVersion: '2010-09-09'
Description: This Template will create the supporting infrastructure for the ElectricEye-Pagerduty module to send Security Hub findings to Pagerduty
Metadata:
  License: GPL-3.0
Parameters:
  WebHookParameterName:
    Type: String
    Description: The name of the SSM Parameter that contains the Pagerduty Integration Key NOTE if you chose a different name than the tutorial for this parameter change the default value
    Default: pagerdutyIntegrationKey
  SeverityLevel:
    Type: CommaDelimitedList
    Description: Choose among CRITICAL,HIGH,MEDIUM
    Default: 'CRITICAL,HIGH,MEDIUM'  
Resources:
  ElectricEyePagerdutyRRLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ElectricEye-Pagerduty
      Description: Sends the results of high-severity ElectricEye findings to Pagerduty as incidents - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt ElectricEyePagerdutyExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          PAGERDUTY_INTEGRATION_KEY_PARAMETER: !Ref WebHookParameterName
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import urllib3

          def lambda_handler(event, context):
              # create ssm client
              ssm = boto3.client('ssm')
              # Env var for SSM Param containing PagerDuty integration key
              integrationKeyParam = os.environ['PAGERDUTY_INTEGRATION_KEY_PARAMETER']
              http = urllib3.PoolManager()
              # retrieve slack webhook from SSM
              try:
                  response = ssm.get_parameter(Name=integrationKeyParam,WithDecryption=True)
                  pdIntegrationKey = str(response['Parameter']['Value'])
              except Exception as e:
                  print(e)
              for findings in event['detail']['findings']:
                  severityLabel = str(findings['Severity']['Label'])
                  if severityLabel == 'CRITICAL':
                      pdSev = str('critical')
                  elif severityLabel == 'HIGH':
                      pdSev = str('error')
                  elif severityLabel == 'MEDIUM' or 'LOW':
                      pdSev = str('warning')
                  elif severityLabel == 'INFORMATIONAL':
                      pdSev = str('info')
                  else:
                      pass
                  electricEyeCheck = str(findings['Title'])
                  findingDescription = str(findings['Description'])
                  findingId = str(findings['Id'])
                  awsAccountId = str(findings['AwsAccountId'])
                  remediationReccText = str(findings['Remediation']['Recommendation']['Text'])
                  remediationReccUrl = str(findings['Remediation']['Recommendation']['Url'])
                  for resources in findings['Resources']:
                      resourceType = str(resources['Type'])
                      resourceId = str(resources['Id'])
                      # create PagerDuty Payload
                      pagerdutyEvent = {
                          "payload": {
                              "summary": 'AWS account ' + awsAccountId + ' has failed ElectricEye check ' + electricEyeCheck,
                              "source": "ElectricEye",
                              "severity": pdSev,
                              "component": resourceId,
                              "class": "Security Hub Finding",
                              "custom_details": {
                                  "finding_description": findingDescription,
                                  "aws_account_id": awsAccountId,
                                  "security_hub_severity": severityLabel,
                                  "remediation_text": remediationReccText,
                                  "remediation_url": remediationReccUrl,
                                  "resource_type": resourceType
                              }
                          },
                          "dedup_key": findingId,
                          "event_action": "trigger"
                      }
                      pdHeaders = {
                          'Content-Type': 'application/json',
                          'X-Routing-Key': pdIntegrationKey
                      }
                      # this is a static value
                      pdEventApiv2Url = 'https://events.pagerduty.com/v2/enqueue'
                      # form a request
                      r=http.request('POST', pdEventApiv2Url, headers=pdHeaders, body=json.dumps(pagerdutyEvent).encode('utf-8'))
                      print(r)
  ElectricEyePagerdutyExecRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ElectricEye-Pagerduty-RolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - kms:Decrypt
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  ElectricEyePagerdutyEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: ElectricEye-Pagerduty-CWE
      Description: "Sends the results of high-severity ElectricEye findings to Pagerduty as incidents - Managed by CloudFormation"
      EventPattern: 
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            ProductFields:
              Product Name:
                - Day2SecurityBot
            Severity:
              Label: !Ref SeverityLevel
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "ElectricEyePagerdutyRRLambdaFunction"
              - "Arn"
          Id: "ElectricEye_Pagerduty_CWE"
  ElectricEyePagerdutyRRCWEPermissions: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "ElectricEyePagerdutyRRLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ElectricEyePagerdutyEventRule"
          - "Arn"
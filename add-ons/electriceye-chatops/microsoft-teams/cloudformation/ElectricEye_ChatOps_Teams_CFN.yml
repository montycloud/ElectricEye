AWSTemplateFormatVersion: 2010-09-09
Description: This Template will create the supporting infrastructure for the ElectricEye-ChatOps module to send Security Hub findings to Teams
Metadata:
  License: GPL-3.0
Parameters:
  WebHookParameterName:
    Type: String
    Description: The name of the SSM Parameter that contains the Teams App Webhook URL for ElectricEye-ChatOps Teams edition
    Default: teamswebhookParam
  SeverityLevel:
    Type: CommaDelimitedList
    Description: Choose among CRITICAL,HIGH,MEDIUM
    Default: 'CRITICAL,HIGH,MEDIUM'   
Resources:
  ElectricEyeChatOpsTeamsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ElectricEye-TeamsChatOps-Teams
      Description: Sends the results of high-severity ElectricEye findings to a Teams Channel - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt ElectricEyeTeamsChatOpsExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          MS_TEAMS_WEBHOOK_PARAMETER: !Ref WebHookParameterName
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import urllib3


          def lambda_handler(event, context):
              # create ssm client
              ssm = boto3.client('ssm')
              # create env var for SSM Parameter containing the Microsoft Teams webhook
              webhookParam = os.environ['MS_TEAMS_WEBHOOK_PARAMETER']
              http = urllib3.PoolManager()
              # retrieve Teams webhook from SSM
              try:
                  response = ssm.get_parameter(Name=webhookParam,WithDecryption=True)
                  teamsWebhook = str(response['Parameter']['Value'])
              except Exception as e:
                  print(e)
              teamsHeaders = {'Content-Type': 'application/json'}
              for findings in event['detail']['findings']:
                  severityLabel = str(findings['Severity']['Label'])
                  electricEyeCheck = str(findings['Title'])
                  awsAccountId = str(findings['AwsAccountId'])
                  for resources in findings['Resources']:
                      resourceId = str(resources['Id'])
                      teamsMessage = 'A new ' + severityLabel + ' severity finding for ' + resourceId + ' in acccount ' + awsAccountId + ' has been created in Security Hub due to failing the check: ' + electricEyeCheck
                      message = {'text': teamsMessage}
                      http.request('POST', teamsWebhook,  headers=teamsHeaders, body=json.dumps(message).encode('utf-8'))
  ElectricEyeTeamsChatOpsExecRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ElectricEye-TeamsChatOps-RolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:GetParameters
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  ElectricEyeTeamsChatOpsEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: ElectricEye-TeamsChatOps-CWE
      Description: "Sends the results of high-severity ElectricEye findings to a Teams Channel via Lambda - Managed by CloudFormation"
      EventPattern: 
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            ProductFields:
              Product Name:
                - Day2SecurityBot
            Severity:
              Label: !Ref SeverityLevel
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "ElectricEyeChatOpsTeamsLambdaFunction"
              - "Arn"
          Id: "ElectricEye_ChatOps_CWE"
  ElectricEyeTeamsChatOpsCWEPermissions: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "ElectricEyeChatOpsTeamsLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ElectricEyeTeamsChatOpsEventRule"
          - "Arn"
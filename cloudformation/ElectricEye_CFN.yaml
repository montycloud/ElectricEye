AWSTemplateFormatVersion: '2010-09-09'
Description: This Template will create the supporting infrastructure for ElectricEye
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Application Configuration
        Parameters:
          - Application
          - Environment
          - ApplicationId
      - Label:
          default: Artifacts Configuration
        Parameters:
          - S3BucketName
          - ECRImageURI
      - Label:
          default: SecurityBot Configuration
        Parameters:
          - ScheduleExpression
          - VpcCIDR
          - ElectricEyeScheduledSubnet1CIDR
          - ElectricEyeScheduledSubnet2CIDR
    ParameterLabels:
      Application:
        default: Application Name
      Environment:
        default: Environment Type such as Prod , QA , STG , DEV
      ApplicationId:
        default: To be hidden from customer
      S3BucketName:
        default: S3 Bucket to download Auditors python scripts
      ScheduleExpression:
        default: Cron expression to run ECS Fargate Task
      ECRImageURI:
        default: ECR Image URL
      VpcCIDR:
        default: Please enter the IP range (CIDR notation) for this VPC
      ElectricEyeScheduledSubnet1CIDR:
        default: Please enter the IP range (CIDR notation) for the public subnet in
          the first Availability Zone
      ElectricEyeScheduledSubnet2CIDR:
        default: Please enter the IP range (CIDR notation) for the public subnet in
          the second Availability Zone
Parameters:
  Application:
    Type: String
    Default: SecurityBot
    Description: Application Name
  Environment:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev
  ApplicationId:
    Type: String
    Default: ''
    Description: Application Id
  S3BucketName:
    Type: String
    Description: Public S3 bucket which holds the artifacts python auditor scripts
    Default: dev-artifact-bucket-us-east-1-908268824556
  ScheduleExpression:
    Type: String
    Description: time at which to invoke this Fargate Task
    Default: rate(12 hours)
  ECRImageURI:
    Type: String
    Description: ECR URI of the ElectricEye container
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.77.0.0/16
  ElectricEyeScheduledSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the first Availability Zone
    Type: String
    Default: 10.77.10.0/24
  ElectricEyeScheduledSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the second Availability Zone
    Type: String
    Default: 10.77.20.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VpcCIDR'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'Environment'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'Environment'
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
  ElectricEyeScheduledSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref 'ElectricEyeScheduledSubnet1CIDR'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment} Public Subnet (AZ1)'
  ElectricEyeScheduledSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref 'ElectricEyeScheduledSubnet2CIDR'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment} Public Subnet (AZ2)'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub '${Environment} Public Routes'
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  ElectricEyeScheduledSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'ElectricEyeScheduledSubnet1'
  ElectricEyeScheduledSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'ElectricEyeScheduledSubnet2'
  ElectricEyeS3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref 'PublicRouteTable'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref 'VPC'
  ElectricEyeEcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'ElectricEyeSecurityGroup'
      SubnetIds:
        - !Ref 'ElectricEyeScheduledSubnet1'
        - !Ref 'ElectricEyeScheduledSubnet2'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcId: !Ref 'VPC'
  ElectricEyeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ElectricEye Security Group
      GroupDescription: Security group with HTTPS for Electric Eye Fargate
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: HTTPS Inbound
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: '0.0.0.0/0'
  ElectricEyeECSCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - ElectricEye
          - !Ref 'AWS::StackName'
      RetentionInDays: 90
  ElectricEyeECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ElectricEyeCluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  ElectricEyeTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: electriceyetaskpolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - access-analyzer:ListAnalyzers
                  - apigateway:GET
                  - appmesh:DescribeMesh
                  - appmesh:DescribeVirtualNode
                  - appmesh:ListMeshes
                  - appmesh:ListVirtualNodes
                  - appstream:DescribeFleets
                  - appstream:DescribeImages
                  - appstream:DescribeUsers
                  - backup:DescribeProtectedResource
                  - cloudformation:DescribeStacks
                  - cloudfront:ListDistributions
                  - cloudfront:GetDistribution
                  - cloudtrail:DescribeTrails
                  - cloudtrail:ListTrails
                  - cloudwatch:GetMetricData
                  - codebuild:BatchGetProjects
                  - codebuild:ListProjects
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:ListUserPools
                  - detective:ListGraphs
                  - dms:DescribeReplicationInstances
                  - ds:DescribeDirectories
                  - ds:ListLogSubscriptions
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - dynamodb:DescribeContinuousBackups
                  - dynamodb:DescribeTimeToLive
                  - ec2:DescribeAddresses
                  - ec2:DescribeFlowLogs
                  - ec2:DescribeImageAttribute
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSnapshotAttribute
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcs
                  - ec2:GetEbsDefaultKmsKeyId
                  - ec2:GetEbsEncryptionByDefault
                  - ecs:ListClusters
                  - ecs:DescribeClusters
                  - ecr:DescribeImages
                  - ecr:DescribeRepositories
                  - ecr:GetLifecyclePolicy
                  - ecr:GetRepositoryPolicy
                  - eks:DescribeCluster
                  - eks:ListClusters
                  - elasticfilesystem:DescribeFileSystems
                  - elasticache:DescribeCacheClusters
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticmapreduce:DescribeCluster
                  - elasticmapreduce:DescribeSecurityConfiguration
                  - elasticmapreduce:GetBlockPublicAccessConfiguration
                  - elasticmapreduce:ListClusters
                  - es:DescribeElasticsearchDomain
                  - es:ListDomainNames
                  - firehose:DescribeDeliveryStream
                  - firehose:ListDeliveryStreams
                  - globalaccelerator:ListAccelerators
                  - globalaccelerator:ListListeners
                  - globalaccelerator:ListEndpointGroups
                  - globalaccelerator:DescribeAcceleratorAttributes
                  - glue:GetSecurityConfiguration
                  - glue:GetResourcePolicy
                  - glue:GetCrawler
                  - glue:GetDataCatalogEncryptionSettings
                  - glue:ListCrawlers
                  - guardduty:ListDetectors
                  - iam:GetAccountPasswordPolicy
                  - iam:ListUsers
                  - iam:ListAccessKeys
                  - iam:ListMfaDevices
                  - iam:ListUserPolicies
                  - iam:ListAttachedUserPolicies
                  - iam:ListServerCertificates
                  - imagebuilder:ListImagePipelines
                  - imagebuilder:GetImagePipeline
                  - imagebuilder:ListImageRecipes
                  - imagebuilder:GetImageRecipe
                  - kafka:DescribeCluster
                  - kafka:ListClusters
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - kinesisanalyticsv2:ListApplications
                  - kinesisanalyticsv2:DescribeApplication
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:GetKeyPolicy
                  - kms:GetKeyRotationStatus
                  - kms:ListAliases
                  - kms:ListKeys
                  - lambda:ListFunctions
                  - license-manager:GetLicenseConfiguration
                  - license-manager:ListLicenseConfigurations
                  - macie2:GetMacieSession
                  - managedblockchain:GetNetwork
                  - managedblockchain:ListMembers
                  - managedblockchain:ListNetworks
                  - managedblockchain:GetNode
                  - managedblockchain:GetMember
                  - managedblockchain:ListNodes
                  - mq:DescribeBroker
                  - mq:ListBrokers
                  - qldb:DescribeLedger
                  - qldb:ListJournalS3Exports
                  - qldb:ListLedgers
                  - ram:GetResourceShares
                  - rds:DescribeDBClusterParameterGroups
                  - rds:DescribeDBClusterParameters
                  - rds:DescribeDBClusters
                  - rds:DescribeDBClusterSnapshotAttributes
                  - rds:DescribeDBClusterSnapshots
                  - rds:DescribeDBInstances
                  - rds:DescribeDBParameterGroups
                  - rds:DescribeDBParameters
                  - rds:DescribeDBSnapshotAttributes
                  - rds:DescribeDBSnapshots
                  - redshift:DescribeClusters
                  - redshift:DescribeLoggingStatus
                  - route53:ListHostedZones
                  - s3:GetBucketLogging
                  - s3:GetBucketPolicy
                  - s3:GetBucketPolicyStatus
                  - s3:GetBucketVersioning
                  - s3:GetAccountPublicAccessBlock
                  - s3:GetEncryptionConfiguration
                  - s3:GetLifecycleConfiguration
                  - s3:GetObject
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - sagemaker:DescribeEndpoint
                  - sagemaker:DescribeModel
                  - sagemaker:DescribeNotebookInstance
                  - sagemaker:ListEndpoints
                  - sagemaker:ListModels
                  - sagemaker:ListNotebookInstances
                  - secretsmanager:ListSecrets
                  - securityhub:BatchImportFindings
                  - securityhub:GetFindings
                  - shield:DescribeDRTAccess
                  - shield:DescribeProtection
                  - shield:DescribeSubscription
                  - sns:GetTopicAttributes
                  - sns:ListSubscriptions
                  - sns:ListSubscriptionsByTopic
                  - sns:ListTopics
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:DescribeInstanceAssociationsStatus
                  - ssm:DescribeInstanceInformation
                  - ssm:DescribeInstancePatches
                  - ssm:DescribeInstancePatchStates
                  - ssm:DescribeInstanceProperties
                  - sts:GetCallerIdentity
                  - sqs:ListQueues
                  - sqs:GetQueueAttributes
                  - workspaces:DescribeWorkspaceDirectories
                  - workspaces:DescribeWorkspaces
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
  ElectricEyeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: electriceyeexecpolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - kms:Decrypt
                  - kms:DescribeKey
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
  ElectricEyeECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Ref 'ECRImageURI'
          Name: ElectricEye
          Environment:
            - Name: SH_SCRIPTS_BUCKET
              Value: !Ref 'S3BucketName'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'ElectricEyeECSCloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
      Cpu: 2048
      ExecutionRoleArn: !GetAtt 'ElectricEyeExecutionRole.Arn'
      Memory: 4096
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt 'ElectricEyeTaskRole.Arn'
      Family: ElectricEye2SecurityHubTask
      RequiresCompatibilities:
        - FARGATE
  ElectricEyeTaskScheduler:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Ref 'ScheduleExpression'
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'ElectricEyeECSCluster.Arn'
          RoleArn: !GetAtt 'ElectricEyeTaskRole.Arn'
          Id: ElectricEyeTaskScheduler
          EcsParameters:
            TaskDefinitionArn: !Ref 'ElectricEyeECSTaskDefinition'
            TaskCount: 1
            LaunchType: FARGATE
            PlatformVersion: LATEST
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref 'ElectricEyeSecurityGroup'
                Subnets:
                  - !Ref 'ElectricEyeScheduledSubnet1'
                  - !Ref 'ElectricEyeScheduledSubnet2'
Outputs:
  StackName:
    Description: Stack name.
    Value: !Sub '${AWS::StackName}'
  VPCId:
    Description: VPC Id
    Value: !Ref 'VPC'
  SubnetId1:
    Description: Subnet Id 1
    Value: !Ref 'ElectricEyeScheduledSubnet1'
  SubnetId2:
    Description: Subnet Id 1
    Value: !Ref 'ElectricEyeScheduledSubnet2'
  SecurityGroupId:
    Description: Security Group Id of Security Bot
    Value: !Ref 'ElectricEyeSecurityGroup'
  ECSTaskDefinition:
    Description: Task Definition of Security Bot
    Value: !Ref 'ElectricEyeECSTaskDefinition'
  SecurityBotExecutionRole:
    Description: Arn of Execution Role
    Value: !GetAtt 'ElectricEyeExecutionRole.Arn'
  SecurityBotTaskRole:
    Description: Arn of Task Role
    Value: !GetAtt 'ElectricEyeTaskRole.Arn'
  LaunchType:
    Description: Launch Type
    Value: FARGATE
  AssignPublicIp:
    Description: Public IP
    Value: ENABLED
  S3Bucket:
    Description: S3BucketName
    Value: !Ref 'S3BucketName'
  Cluster:
    Description: Cluster Name
    Value: !Ref 'ElectricEyeECSCluster'
